@model Public360.ViewModels.CityDetail

@{
    ViewBag.Title = "Details";
}
<script src="/Scripts/jquery-1.7.1.min.js" type="text/javascript"></script> 
<script type="text/javascript">
    //classes
    function city(id, name, population, stateID) {
        this.id = id;
        this.name = name;
        this.population = population;
        this.stateID = stateID;

        this.selected = selected;
        function selected(sel) {
            this.selected = sel;
        }

        this.displayOrder = displayOrder;
        function displayOrder(dispOrder) {
            this.displayOrder = dispOrder;
        }
    }

    function expander(uniqueID, sortOrder, active, displayText, dataLevel, parentUniqueID, isLeaf, source) {
        this.uniqueID = uniqueID;
        this.sortOrder = sortOrder;
        this.active = active;
        this.displayText = displayText;
        this.dataLevel = dataLevel;
        this.parentUniqueID = parentUniqueID;
        this.isLeaf = isLeaf;
        this.source = source;

        this.cityDataLeafs = cityDataLeafs;
        function cityDataLeafs(leafs) {
            this.cityDataLeafs = leafs;
        }
    }

    function leaf(uniqueID, sortOrder, active, displayText, parentUniqueID) {
        this.uniqueID = uniqueID;
        this.sortOrder = sortOrder;
        this.active = active;
        this.displayText = displayText;
        this.parentUniqueID = parentUniqueID;

        this.cityDatas = cityDatas;
        function cityDatas(datas) {
            this.cityDatas = datas;
        }
    }

    function cityData(uniqueID, cityID, data, percentData) {
        this.uniqueID = uniqueID;
        this.cityID = cityID; 
        this.data = data;
        this.percentData = percentData;
    }

</script>
<script type="text/javascript">
    //globals
    var cities = new Array();
    var expanders = new Array();
    var cityLoop = 0;
    var clickingExpander = false;

    //load base city information on page load
    var cityBase = new city(@Model.City.CityID, "@Model.City.CityUniqueName", @Model.CityPopulation, @Model.City.StateID);
    cityBase.selected(1);
    cityBase.displayOrder(1);
    
    //assign base city to city array
    cities[cities.length] = cityBase;

</script>
<script type="text/javascript">
    function uiUpdateCityHeader() {

        var cityDataCol1 = $('#CityDataCol1');
  
          //for each selected city make a column in order
        var output8 = "";
        for (s = 1; s < 4; s++) {
            var cityTemp8 = null;
            for (i = 0; i < cities.length; i++) {
                cityTemp8 = cities[i];
                if (cityTemp8.selected == 1) {
                    if (cityTemp8.displayOrder == s) {
                        if (i == 0) {
                            //base city
                            output8 = output8 + cityTemp8.name + "&nbsp;&nbsp;&nbsp;";
                        }
                        else {
                            output8 = output8 + cityTemp8.name + "&nbsp;" + '<button id="UICityDelButton' + cityTemp8.id + '" class="UICityDelButton">X</button>' + "&nbsp;&nbsp;&nbsp;";
                        }
                        break;
                    }
                }
            }
        }
        cityDataCol1.html(output8);
    }

</script>

</script>

<script type="text/javascript">
    function updateModelFromJSON(expanderID, cityID, currentCityLoop, updateModelFromJSONCallback) {


        //leaf notes
        //expand leaf class - see if leafs exist, if do use them, if not exist load for cities selected, in 
        //city index sort 1,2,3 index 5,2,15 (city indexes remain unchanged during page usage)
        //if leaf exists, see if citydata exist, if so skip
        //if leaf exists, citydata doesn't exist, load from db
        //loop through leafs, compare by index to db leafs and match titles, if match, load citydata for leaf
        //mark incoming leaf data matched
        //if no match, leave city data empty
        //loop through incoming leaf data search for no match, if found, add to end of child leafs, add data

        var cityTemp5 = null;
        cityTemp5 = cities[currentCityLoop];

        // locate expander
        var foundExp = false;
        var expanderTemp5 = null;
        for (i = 0; i < expanders.length; i++) {
            expanderTemp5 = expanders[i];
            if (expanderTemp5.uniqueID == expanderID) {
                foundExp = true;
                break;
            }
        }

        var cityDataLeafs = null;

        if (foundExp == true) {
            if (expanderTemp5.cityDataLeafs == null) {
                //no leafs loaded

                //create empty collection
                cityDataLeafs = new Array();

                //assign collection to expander
                expanderTemp5.cityDataLeafs = cityDataLeafs;

            }
            else {
                cityDataLeafs = expanderTemp5.cityDataLeafs;
            }
        }
        else {
            alert("Could not find expander");
        }

        //load leafs from selected city
        $.getJSON('@Url.Action("UICityDataJSON")', { uiCityDataTypeID: expanderID, cityID: cityID, stateID: cityTemp5.stateID }, function (uiCityDatas) {
            $.each(uiCityDatas, function (index, uiCityData) {

                //does leaf already exist
                var leafFound = false;
                var leafTemp5 = null;
                for (i = 0; i < cityDataLeafs.length; i++) {
                    leafTemp5 = cityDataLeafs[i];
                    if (leafTemp5.displayText == uiCityData.text) {
                        leafFound = true;
                        break;
                    }
                }

                if (leafFound != true) {
                    //leaf not found

                    //add leaf
                    //todo fill in more properties here
                    leafTemp5 = new leaf(0, 0, 1, uiCityData.text, expanderID);
                    leafTemp5.cityDatas = null;

                    //add to leaf collection
                    cityDataLeafs[cityDataLeafs.length] = leafTemp5;
                }

                //any city data for leaf exist
                if (leafTemp5.cityDatas == null) {
                    //no city datas loaded

                    //create empty collection
                    var cityDatasTemp5 = new Array();

                    //assign to leaf
                    leafTemp5.cityDatas = cityDatasTemp5;
                }
                else {
                    cityDatasTemp5 = leafTemp5.cityDatas;
                }

                //see if city data already exists for this city
                var cityDataFound = false;
                var cityDataTemp5 = null;
                for (i = 0; i < cityDatasTemp5.length; i++) {
                    cityDataTemp5 = cityDatasTemp5[i];
                    if (cityDataTemp5.cityID == cityTemp5.id) {
                        cityDataFound = true;
                        break;
                    }
                }
                if (cityDataFound != true) {
                    //add city data to leaf 
                    cityDataTemp5 = new cityData(0, cityTemp5.id, uiCityData.value, 0);
                    cityDatasTemp5[cityDatasTemp5.length] = cityDataTemp5;
                }

                //if nothing in collection, null it out
                if (leafTemp5.cityDatas.length == 0) {
                    leafTemp5.cityDatas = null;
                }
            });
            updateModelFromJSONCallback(expanderID);
        });
    }

    function modelFromJSONCallback(expanderID) {
        if (cityLoop < cities.length) {
            var currentCityLoop = cityLoop;
            var cityTemp5 = cities[cityLoop];
            var answer = expanderCityHasData(expanderID);
            cityLoop++;
            if (!answer) {
                //recursive
                updateModelFromJSON(expanderID, cityTemp5.id, currentCityLoop, modelFromJSONCallback);
            }
            else {
                //recursive
                modelFromJSONCallback(expanderID);
           }
        }
        else {
           //all json is done
            uiUpdateCityHeader();
            uiUpdateLeafsDisplay(expanderID);
            if (clickingExpander) {
                uiUpdateVisibilityAndButton(expanderID);
                clickingExpander = false;
            }
        }
    }

    function uiUpdateVisibilityAndButton(expanderID) {
        var selectedButton = null;
        $('.UISubTypeButton').each(function (index) {
            var uiSubTypeButton = $(this);
            var id = uiSubTypeButton.attr("id");
            var buttonNum = id.toString().substring(15);
            if (buttonNum == expanderID)
            {
                selectedButton = $(this);
            }
        });
        if (selectedButton != null) {
            if (selectedButton.html() == 'Expand') {
                var expID = '#UISubTypeExpander' + expanderID;
                var cityExpander = $(expID);
                $('.UIDetail' + expanderID.toString()).attr("style", "display:show");
                selectedButton.html('Contract');
            }
            else {
                $('.UIDetail' + expanderID.toString()).attr("style", "display:none");
                selectedButton.html('Expand');
            }
        }
        else {
            alert("Expander button not found");
        }
    }

    function expanderCityHasData(expanderID) {
    
        var foundExp = false;
        var expanderTemp5 = null;
        for (i = 0; i < expanders.length; i++) {
            expanderTemp5 = expanders[i];
            if (expanderTemp5.uniqueID == expanderID) {
                foundExp = true;
                break;
            }
        }

        var cityDataLeafs = null;

        if (foundExp == true) {
            if (expanderTemp5.cityDataLeafs == null) {
                //no leafs loaded

                //create empty collection
                cityDataLeafs = new Array();

                //assign collection to expander
                expanderTemp5.cityDataLeafs = cityDataLeafs;

            }
            else {
                cityDataLeafs = expanderTemp5.cityDataLeafs;
            }
        }
        else {
            alert("Expander not found");
        }

        var cityTemp5 = null;
        var i = cityLoop;
        cityTemp5 = cities[i];
        if (cityTemp5.selected == 1) {
            var foundLeafCityData = false;
            //todo precheck - see if first leaf has the city data in it, if so skip loading of leafs for that city
            if (cityDataLeafs.length > 0) {

                //get first leaf only
                leafTemp5 = cityDataLeafs[0];

                //search for city data
                if (leafTemp5.cityDatas != null) {
                    //have some data
                    for (i2 = 0; i2 < leafTemp5.cityDatas.length; i2++) {
                        cityDataTemp5 = leafTemp5.cityDatas[i2];
                        if (cityDataTemp5.cityID == cityTemp5.id) {
                            foundLeafCityData = true;
                            break;
                        }
                    }
                }
            }
        }
        return foundLeafCityData;
    }

</script>
<script type="text/javascript">
    function uiUpdateLeafsDisplay(expanderID) {
        if (expanderID != null && expanderID != '') {
            // locate expander
            var foundExp7 = false;
            var expanderTemp7 = null;
            for (i = 0; i < expanders.length; i++) {
                expanderTemp7 = expanders[i];
                if (expanderTemp7.uniqueID == expanderID) {
                    foundExp = true;
                    break;
                }
            }

            if (foundExp == true) {
                var expID = '#UISubTypeExpander' + expanderID;
                var cityExpander = $(expID);
                cityExpander.html('');

                //locate leaves and append
                if (expanderTemp7.cityDataLeafs != null) {
                    for (i2 = 0; i2 < expanderTemp7.cityDataLeafs.length; i2++) {
                        var leafTemp7 = expanderTemp7.cityDataLeafs[i2];
                        var output = '<div id="UIDetail' + expanderID.toString() + '" class="UIDetail' + expanderID.toString() + '">' + leafTemp7.displayText + '&nbsp;&nbsp;&nbsp;&nbsp;';
                        //locate city data and append,in order where selected

                        for (s = 1; s < 4; s++) {
                            var cityTemp8 = null;
                            for (i = 0; i < cities.length; i++) {
                                cityTemp8 = cities[i];
                                if (cityTemp8.selected == 1) {
                                    if (cityTemp8.displayOrder == s) {
                                        for (i3 = 0; i3 < leafTemp7.cityDatas.length; i3++) {
                                            var cityData7 = leafTemp7.cityDatas[i3];
                                            if (cityData7.cityID == cityTemp8.id) {
                                                //found
                                               var value = cityData7.data;
                                               output = output + value + '&nbsp;&nbsp;&nbsp;'
                                               break;
                                            }
                                        }
                                        break;
                                    }
                                }
                            }
                        }
                        output = output + '<br />' + '</div>'
                        cityExpander.append(output);
                    }
                }
            }
            else {
                alert("Expander not found");
            }
        }
    }
</script>

<script type="text/javascript">
    $(function () {
        $('.UICityDelButton').live('click',function () {
            var uiCityDelButton = $(this);
            var id = uiCityDelButton.attr("id");
            var num = id.toString().substring(15);
            if (num != null && num != '') {
                //locate city in collection
                var oldOrder = 99;
                for (i = 0; i < cities.length; i++) {
                    var cityTemp2 = cities[i];
                    if (cityTemp2.id == num) {
                        //deselect city
                        cityTemp2.selected = 0;
                        oldOrder = cityTemp2.displayOrder;
                        cityTemp2.displayOrder = 0;
                        break;
                    }
                }


                //reorder the cities
                for (s = 1; s < 4; s++) {
                    var cityTemp8 = null;
                    for (i = 0; i < cities.length; i++) {
                        cityTemp8 = cities[i];
                        if (cityTemp8.selected == 1) {
                            if (cityTemp8.displayOrder == s) {
                                if (cityTemp8.displayOrder > oldOrder) {
                                    cityTemp8.displayOrder = cityTemp8.displayOrder - 1;
                                }
                            }
                        }
                    }
                }

                uiUpdateCityHeader();

                cityLoop = 0;

                $('.UISubTypeButton').each(function (index) {
                    var uiSubTypeButton = $(this);
                    if (uiSubTypeButton.html() == "Contract") {
                        var id = uiSubTypeButton.attr("id");
                        var num = id.toString().substring(15);
                        if (num != null && num != '') {
                            modelFromJSONCallback(num);
                        }
                    }
                });
            }
        });
    });
</script>

<script type="text/javascript">
    $(function () {
        $('.UISubTypeButton').live('click',function () {
            var uiSubTypeButton = $(this);
            var id = uiSubTypeButton.attr("id");
            var num = id.toString().substring(15);
            var cityID = @Model.City.CityID;
            if (num != null && num != '') {
                cityLoop = 0;
                clickingExpander = true;
                modelFromJSONCallback(num);
            }
        });
    });
</script>

<script type="text/javascript">
    $(function () {
        $('.UISourceCityButton').live('click', function () {
            var uiSourceCityButton = $(this);
            var id = uiSourceCityButton.attr("id");
            var num = id.toString().substring(18);
            if (num != null && num != '') {

                //determine how many cities are already selected and max display order
                var cityCount = 0;
                var selectedCount = 0;
                var maxDisplayOrder = 0;
                for (i = 0; i < cities.length; i++) {
                    var cityTemp2 = cities[i];
                    cityCount++;
                    if (cityTemp2.selected == 1) {
                        selectedCount++;
                        if (maxDisplayOrder < cityTemp2.displayOrder) {
                            maxDisplayOrder = cityTemp2.displayOrder;
                        }
                    }
                }

                //max 2 extra cities allowed + base city, if already have max, show message only
                if (selectedCount >= 3) {
                    alert("Maximum comparison cities already selected, please remove a city to select another");
                }
                else {

                    //is city already in collection
                    var found = false;
                    var cityTemp3 = null;
                    for (i = 0; i < cities.length; i++) {
                        cityTemp3 = cities[i];
                        if (cityTemp3.id == num) {
                            found = true;
                            break;
                        }
                    }
                    if (found == true) {

                        //select it
                        cityTemp3.selected = 1;

                        //set display order
                        cityTemp3.displayOrder = maxDisplayOrder + 1;

                    }
                    else {
                        //create comparison city

                        var uniqueName = $("#UISourceCityUniqueName" + num).val();
                        var pop = $("#UISourceCityPopulation" + num).val();
                        var stateID = $("#UISourceCityStateID" + num).val();
                        var cityTemp4 = new city(num, uniqueName, pop, stateID);

                        //select it
                        cityTemp4.selected = 1;

                        //set display order
                        cityTemp4.displayOrder = maxDisplayOrder + 1;

                        //add to cities collection
                        cities[cities.length] = cityTemp4;
                    }
                }

                uiUpdateCityHeader();

                $('.UISubTypeButton').each(function (index) {
                    var uiSubTypeButton = $(this);
                    if (uiSubTypeButton.html() == "Contract") {
                        var id = uiSubTypeButton.attr("id");
                        var num = id.toString().substring(15);
                        if (num != null && num != '') {
                            modelFromJSONCallback(num);
                        }
                    }
                });
            }
        });
    });
</script>
<script type="text/javascript">
    $(function () {
        $('#UICityDataTypeList').change(function () {
            var selectedUICityDataType = $("#UICityDataTypeList").val();
            if (selectedUICityDataType != null && selectedUICityDataType != '') {

                //clear out array fresh on each city data type click
                expanders = new Array();

                //load expander collection
                $.getJSON('@Url.Action("UICityDataTypeFullJSON")', { uiCityDataTypeID: selectedUICityDataType }, function (uiCityDataTypes) {
                    $.each(uiCityDataTypes, function (index, uiCityDataType) {
                        var expander1 = new expander(uiCityDataType.uniqueID, uiCityDataType.sortOrder, uiCityDataType.active, uiCityDataType.displayText, uiCityDataType.dataLevel, uiCityDataType.parentUniqueID, uiCityDataType.isLeaf, uiCityDataType.source);
                        expander1.cityDataLeafs = null;
                        expanders[expanders.length] = expander1;
                    });

                    //move here so executes after json completes
                    var cityData = $('#CityData');

                    cityData.html('<div id="CityDataCol1"></div>');
                    cityData.append('<div id="CityDataUnder"></div>');

                    uiUpdateCityHeader();

                    var cityDataUnder = $('#CityDataUnder');

                    //for each expander make a row
                    for (i = 0; i < expanders.length; i++) {
                        var expander2 = expanders[i];
                        cityDataUnder.append('<div id="UISubType' + expander2.uniqueID + '">' + expander2.displayText + '&nbsp;&nbsp;&nbsp;&nbsp;' + '<button id="UISubTypeButton' + expander2.uniqueID + '" class="UISubTypeButton">Expand</button>' + '<br />' + '</div>' + '<div id="UISubTypeExpander' + expander2.uniqueID + '">' + '</div>');
                    }
                });
            }
        });
    });
</script>
<script type="text/javascript">
    $(function () {
        $('#ComparisonCityList').change(function () {
            var selectedCity = $("#ComparisonCityList").val();
            if (selectedCity != null && selectedCity != '') {
                $.getJSON('@Url.Action("SingleCityPopJSON")', { cityID: selectedCity }, function (cities) {
                    var citiesSelect = $('#SourceCitiesList');
                    $.each(cities, function (index, city) {
                        var sourceCityID = '#UISourceCity' + city.value.toString();
                        var existCity = $(sourceCityID);
                        if (existCity.html() == null) {
                            citiesSelect.append('<div id="UISourceCity' + city.value + '">' + '<button id="UISourceCityButton' + city.value + '" class="UISourceCityButton">Add</button>' + city.text + '<input type="hidden" id="UISourceCityUniqueName' + city.value + '" value="' + city.name + '" />' + '<input type="hidden" id="UISourceCityPopulation' + city.value + '" value="' + city.population + '" />' + '<input type="hidden" id="UISourceCityStateID' + city.value + '" value="' + city.stateID + '" />' + '&nbsp;&nbsp;&nbsp;&nbsp;<br />' + '</div>');
                        }
                    });
                });
            }
        });
    });
</script>

<script type="text/javascript">
    $(function () {
        $('#Submit').click(function () {
            var percent = $("#PopComparisonPercent").val();
            var cityID = @Model.City.CityID;
            var stateID = @Model.City.StateID;
            var homePop = @Model.CityPopulation;

            if (percent != null && percent != '') {
                $.getJSON('@Url.Action("CitiesWithinPercentJSON")', { excludeCityID: cityID, stateID: stateID, homePop: homePop, percent: percent }, function (cities) {
                    var citiesSelect = $('#SourceCitiesList');
                    //citiesSelect.html('');
                    $.each(cities, function (index, city) {
                        var sourceCityID = '#UISourceCity' + city.value.toString();
                        var existCity = $(sourceCityID);
                        if (existCity.html() == null) {
                            citiesSelect.append('<div id="UISourceCity' + city.value + '">' + '<button id="UISourceCityButton' + city.value + '" class="UISourceCityButton">Add</button>' + city.text + '<input type="hidden" id="UISourceCityUniqueName' + city.value + '" value="' + city.name + '" />' + '<input type="hidden" id="UISourceCityPopulation' + city.value + '" value="' + city.population + '" />' + '<input type="hidden" id="UISourceCityStateID' + city.value + '" value="' + city.stateID + '" />' + '&nbsp;&nbsp;&nbsp;&nbsp;<br />' + '</div>');
                        }
                    });
                });
            }
        });
    });
</script>

<h2>City: @Model.City.CityUniqueName</h2><br />
<div class="user-selection" style="background-color:#FFD700;height:500px;width:400px;float:left;">
 Select Type of Data<br />
        <select id="UICityDataTypeList" size=@Model.UICityDataTypeSize>
            @foreach (var uiCityDataType in Model.UICityDataTypes)
            {
                <option value=@uiCityDataType.CityDataTypeID>@uiCityDataType.DisplayText</option>
            }
         </select> <br />
    <h3>Add Comparisons</h3><br />
        <select id="ComparisonCityList">
            <option value="">Select City...</option>

            @foreach (var city in Model.ComparisonCities)
            {
                <option value=@city.CityID>@city.CityUniqueName</option>
            }
         </select> <br />
         Population&nbsp;&nbsp;@Model.CityPopulation &nbsp; &nbsp: Within +/- (%) <input id="PopComparisonPercent" type="text" value="3" /> <br />

        <button id="Submit">Submit</button>
        <div id="SourceCitiesList" >
        </div>
</div>
<div id="CityData" style="float:left;">
</div>
